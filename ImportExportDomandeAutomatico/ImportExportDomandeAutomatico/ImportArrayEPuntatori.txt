Domanda: Qual è la differenza tra un array multidimensionale e un array di puntatori in C?
Risposta 1: Gli array multidimensionali sono più efficienti in termini di memoria rispetto agli array di puntatori.
Risposta 2: Gli array multidimensionali contengono dati di tipo diverso, mentre gli array di puntatori contengono dati dello stesso tipo.
Risposta 3: Gli array multidimensionali hanno una dimensione fissa, mentre gli array di puntatori possono avere dimensioni variabili.
Risposta 4: Gli array multidimensionali non possono essere utilizzati come argomenti per le funzioni, mentre gli array di puntatori possono.
Indice risposta corretta: 3
Difficoltà: 2
Fonte: Libro "Programmazione in C" - Capitolo 10, Paragrafo 4

Domanda: Cosa rappresenta l'operatore -> in C?
Risposta 1: Moltiplicazione.
Risposta 2: Sottrazione.
Risposta 3: Accesso a un membro di una struttura puntata da un puntatore.
Risposta 4: Somma.
Indice risposta corretta: 3
Difficoltà: 1
Fonte: Slides - Capitolo 11, Pagina 2

Domanda: Come si crea un array di puntatori in C?
Risposta 1: Dichiarando un array e inizializzandolo con puntatori.
Risposta 2: Dichiarando un puntatore e inizializzandolo con un array.
Risposta 3: Non è possibile creare un array di puntatori in C.
Risposta 4: Utilizzando solo variabili intere.
Indice risposta corretta: 1
Difficoltà: 1
Fonte: Libro "Programmazione in C" - Capitolo 11, Paragrafo 1

Domanda: Qual è il valore dell'operatore sizeof quando utilizzato con un puntatore in C?
Risposta 1: La dimensione dell'oggetto puntato dal puntatore.
Risposta 2: La dimensione del puntatore stesso.
Risposta 3: La somma delle dimensioni degli oggetti puntati dal puntatore.
Risposta 4: La dimensione dell'indirizzo di memoria puntato dal puntatore.
Indice risposta corretta: 2
Difficoltà: 1
Fonte: Slides - Capitolo 12, Pagina 4

Domanda: Cosa rappresenta un puntatore void in C?
Risposta 1: Un tipo di puntatore che può puntare solo a variabili di tipo float.
Risposta 2: Un tipo di puntatore che può puntare a variabili di qualsiasi tipo.
Risposta 3: Un tipo di puntatore che può puntare solo a variabili di tipo int.
Risposta 4: Un tipo di puntatore che può puntare solo a variabili di tipo char.
Indice risposta corretta: 2
Difficoltà: 1
Fonte: Libro "Programmazione in C" - Capitolo 13, Paragrafo 2

Domanda: Come si restituisce un array da una funzione in C?
Risposta 1: Utilizzando una variabile globale.
Risposta 2: Utilizzando un puntatore come argomento della funzione.
Risposta 3: Non è possibile restituire un array da una funzione in C.
Risposta 4: Utilizzando l'operatore return seguito dall'array.
Indice risposta corretta: 2
Difficoltà: 2
Fonte: www.learn-c.org

Domanda: Come si accede all'elemento all'indice i di un array utilizzando un puntatore in C?
Risposta 1: Utilizzando l'operatore * prima del puntatore.
Risposta 2: Utilizzando l'operatore . prima del puntatore.
Risposta 3: Utilizzando l'operatore -> prima del puntatore.
Risposta 4: Non è possibile accedere agli elementi di un array utilizzando un puntatore.
Indice risposta corretta: 1
Difficoltà: 2
Fonte: Libro "Programmazione in C" - Capitolo 15, Paragrafo 3

Domanda: Cosa rappresenta l'operatore & prima di una variabile in C?
Risposta 1: L'indirizzo di memoria della variabile.
Risposta 2: Il valore della variabile.
Risposta 3: La dimensione della variabile.
Risposta 4: La somma della variabile con se stessa.
Indice risposta corretta: 1
Difficoltà: 1
Fonte: www.learn-c.org

Domanda: Come si calcola l'indirizzo di memoria di un elemento in un array utilizzando un puntatore in C?
Risposta 1: Sommando l'indice dell'elemento all'indirizzo base del puntatore.
Risposta 2: Sottraendo l'indice dell'elemento dall'indirizzo base del puntatore.
Risposta 3: Moltiplicando l'indice dell'elemento per l'indirizzo base del puntatore.
Risposta 4: Dividendo l'indice dell'elemento per l'indirizzo base del puntatore.
Indice risposta corretta: 1
Difficoltà: 2
Fonte: Slides - Capitolo 17, Pagina 5